# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    primary-admin-token: '%env(PRIMARY_ADMIN_TOKEN)%'
    secondary-admin-token: '%env(SECONDARY_ADMIN_TOKEN)%'
    route-frontend-token-create: '/frontend/token/create'
    route-frontend-token-verify: '/frontend/token/verify'
    route-frontend-token-refresh: '/frontend/token/refresh'
    route-frontend-apikey-list: '/frontend/apikey/list'
    route-api-token-create: '/api/token/create'
    route-api-token-verify: '/api/token/verify'
    route-admin-prefix: '/admin'
    route-admin-user-create: '%route-admin-prefix%/user/create'
    route-admin-frontend-refresh-token-revoke: '%route-admin-prefix%/frontend/refresh-token/revoke'
    health_check_bundle_status_path: '/'
    health_check_bundle_enable_status_readiness_inspector: true
    health_check_bundle_status_is_ready: '%env(bool:IS_READY)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    app.admin-authenticator-token-extractor:
        class: Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\AuthorizationHeaderTokenExtractor
        arguments:
            $prefix: ~
            $name: 'Authorization'

    App\Security\Admin\Authenticator:
        arguments:
            $tokenExtractor: '@app.admin-authenticator-token-extractor'
            $validTokens:
                - '%primary-admin-token%'
                - '%secondary-admin-token%'

    app.eventlistener.jwt.created:
        class: App\EventListener\TokenCreatedListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created }

    App\Security\Api\CreateAuthenticator:
        arguments:
            $tokenExtractor: '@app.admin-authenticator-token-extractor'

    App\Security\Jwt\VerifyAuthenticator:
        parent: lexik_jwt_authentication.security.jwt_authenticator

    App\Services\ServiceStatusInspector\JwtConfigurationInspector:
        tags:
            - { name: 'health_check_bundle.component_inspector.health_check' }

    Lexik\Bundle\JWTAuthenticationBundle\Services\KeyLoader\KeyLoaderInterface:
        alias: lexik_jwt_authentication.key_loader.raw
